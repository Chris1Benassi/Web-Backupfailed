---
import Logo from '../components/Logo.astro';
import Hamburger from './Hamburger.astro';

// Dont forget to update Navigation.astro as well
const navItems = [
    { linkText: 'Home', href: '/' },
    { linkText: 'Solutions', href: '/services' },
    { linkText: 'Managed IT', href: '/managed-it' },
    { linkText: 'IT Guides', href: '/blog' },
    { linkText: 'Contact Us', href: '/contact' },
    { linkText: 'About Us', href: '/About' }
];

// Get current path for active link highlighting
const { pathname } = Astro.url;
---

<div class="w-full bg-gradient-to-r from-blue-50 to-blue-100 text-sm py-3 shadow-xl border-b border-blue-200/60">
    <header>
        <nav class="w-full px-4 flex flex-wrap items-center justify-between">
            <div class="flex items-center justify-between w-full sm:w-auto">
                <a class="flex-none text-xl font-semibold text-white focus:outline-none focus:opacity-80" href="/">
                    <Logo />
                </a>
                <button
                    type="button"
                    class="sm:hidden ml-2 p-2 rounded-lg border border-white/20 font-medium bg-blue-600 text-white shadow align-middle hover:bg-white/10 focus:outline-none focus:bg-white/10 text-sm"
                    id="navbar-toggle"
                    aria-expanded="false"
                    aria-label="Toggle navigation"
                    onclick="toggleMobileMenu()"
                >
                    <svg
                        class="block"
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                    >
                        <line x1="3" x2="21" y1="6" y2="6"></line>
                        <line x1="3" x2="21" y1="12" y2="12"></line>
                        <line x1="3" x2="21" y1="18" y2="18"></line>
                    </svg>
                    <span class="sr-only">Toggle navigation</span>
                </button>
            </div>
            <div id="navbar-menu" class="hidden sm:flex flex-row gap-2 sm:items-center sm:justify-end transition-all duration-300">
                <ul class="flex flex-row gap-2 w-full sm:w-auto">
                    {
                        navItems.map((item) => {
                            const isActive = pathname === item.href || (item.href !== '/' && pathname.startsWith(item.href));
                            return (
                                <li>
                                    <a
                                        href={item.href}
                                        class={`text-base px-3 py-1.5 rounded-full font-semibold tracking-wide transition-all duration-200
                        ${isActive ? 'bg-blue-100 text-blue-900 shadow-md' : 'text-gray-900 hover:bg-blue-50 hover:text-blue-700'}
                        hover:underline underline-offset-4`}
                                        aria-current={isActive ? 'page' : undefined}
                                    >
                                        {item.linkText}
                                    </a>
                                </li>
                            );
                        })
                    }
                </ul>
            </div>
        </nav>
    </header>
</div>

<!-- Mobile menu overlay and backdrop (hidden by default) -->
<div id="mobile-backdrop" class="fixed inset-0 bg-black/40 z-40 transition-opacity duration-300 opacity-0 pointer-events-none sm:hidden"></div>

<div
    id="mobile-menu-panel"
    class="fixed right-0 top-0 mt-12 max-h-[90vh] w-3/5 max-w-sm bg-white/80 backdrop-blur-lg rounded-l-2xl shadow-2xl z-50 transform translate-x-full scale-95 opacity-0 transition-all duration-300 sm:hidden flex flex-col px-8 pt-8 pb-8 gap-8 justify-center border border-blue-200/40"
    style="box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);"
>
    <button
        class="absolute top-6 right-6 text-gray-500 hover:text-blue-700 text-2xl focus:outline-none"
        aria-label="Close menu"
        onclick="closeMobileMenu()"
        tabindex="0"
    >
        &times;
    </button>
    <ul class="flex flex-col gap-6 text-right mt-10">
        {
            navItems.map((item) => {
                const isActive = pathname === item.href || (item.href !== '/' && pathname.startsWith(item.href));
                return (
                    <li>
                        <a
                            href={item.href}
                            class={`block text-lg px-4 py-3 rounded-lg font-semibold tracking-wide transition-all duration-200
                ${isActive ? 'bg-blue-100/80 text-blue-900 shadow-md' : 'text-gray-900 hover:bg-blue-50/80 hover:text-blue-700'}
                hover:underline underline-offset-4`}
                            aria-current={isActive ? 'page' : undefined}
                            onclick="closeMobileMenu()"
                        >
                            {item.linkText}
                        </a>
                    </li>
                );
            })
        }
    </ul>
</div>

<button
    id="scrollToTop"
    class="fixed bottom-6 right-6 z-50 p-3 rounded-full bg-blue-600 text-white shadow-lg transition-opacity duration-300 sm:hidden opacity-0 pointer-events-none"
    aria-label="Scroll to top"
    onclick="window.scrollTo({top: 0, behavior: 'smooth'})"
>
    â†‘
</button>
<script>
    // Ensure all menu JS runs after DOM is loaded
    window.addEventListener('DOMContentLoaded', () => {
        // Show button when scrolled down on mobile
        window.addEventListener('scroll', () => {
            const btn = document.getElementById('scrollToTop');
            if (!btn) return;
            if (window.scrollY > 200) {
                btn.classList.remove('opacity-0', 'pointer-events-none');
                btn.classList.add('opacity-100', 'pointer-events-auto');
            } else {
                btn.classList.remove('opacity-100', 'pointer-events-auto');
            }
        });

        // Mobile menu toggle logic with animation
        (window as any).toggleMobileMenu = function () {
            const panel = document.getElementById('mobile-menu-panel');
            const backdrop = document.getElementById('mobile-backdrop');
            if (!panel || !backdrop) return;
            const expanded = panel.classList.contains('translate-x-0');
            if (expanded) {
                (window as any).closeMobileMenu();
            } else {
                panel.classList.remove('translate-x-full', 'scale-95', 'opacity-0');
                panel.classList.add('translate-x-0', 'scale-100', 'opacity-100');
                backdrop.classList.remove('opacity-0', 'pointer-events-none');
                backdrop.classList.add('opacity-100', 'pointer-events-auto', 'backdrop-blur-sm');
                const toggleBtn = document.getElementById('navbar-toggle');
                if (toggleBtn) toggleBtn.setAttribute('aria-expanded', 'true');
            }
        };
        (window as any).closeMobileMenu = function () {
            const panel = document.getElementById('mobile-menu-panel');
            const backdrop = document.getElementById('mobile-backdrop');
            if (!panel || !backdrop) return;
            panel.classList.remove('translate-x-0', 'scale-100', 'opacity-100');
            panel.classList.add('translate-x-full', 'scale-95', 'opacity-0');
            backdrop.classList.add('opacity-0', 'pointer-events-none');
            backdrop.classList.remove('opacity-100', 'pointer-events-auto', 'backdrop-blur-sm');
            const toggleBtn = document.getElementById('navbar-toggle');
            if (toggleBtn) toggleBtn.setAttribute('aria-expanded', 'false');
        };
        // Clicking the backdrop closes the menu
        const backdropEl = document.getElementById('mobile-backdrop');
        if (backdropEl && (window as any).closeMobileMenu) {
            backdropEl.addEventListener('click', (window as any).closeMobileMenu);
        }
        // Accessibility: close menu on Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && (window as any).closeMobileMenu) {
                (window as any).closeMobileMenu();
            }
        });
    });
    // Compute header height and set a CSS variable for anchor offset
    function updateHeaderOffset() {
        const header = document.querySelector('header');
        if (!header) return;
        const height = header.getBoundingClientRect().height || 72;
        document.documentElement.style.setProperty('--header-offset', `${Math.ceil(height)}px`);
    }
    // Run on load and on resize to handle dynamic header sizes
    window.addEventListener('load', updateHeaderOffset);
    window.addEventListener('resize', () => {
        // throttle resize updates
        clearTimeout(window._headerOffsetTimer);
        window._headerOffsetTimer = setTimeout(updateHeaderOffset, 150);
    });
</script>
